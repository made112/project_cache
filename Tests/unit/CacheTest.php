<?php

use PHPUnit\Framework\TestCase;

class CacheTest extends TestCase {
    public Cache $Cache;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->Cache = new Cache();
    }

    /** @test */
    public function is_there_data_when_cache_first_created(){
        $cacheHash = $this->Cache->getCache();
        $this->assertEmpty($cacheHash);
    }
    /** @test */
    public function check_put_operation_on_cache_with_image_size_smaller_than_capacity(){
        $key = "123";
        $value = file_get_contents("C:\Users\Jaafar\Desktop\Tmp\suitable.jpg");
        $status = $this->Cache->TestPUT($key,$value);
        $this->assertTrue($status);
    }
    /** @test */
    public function get_element_exists_in_cache_from_the_cache(){
        $key = "123";
        $image = file_get_contents("C:\Users\Jaafar\Desktop\Tmp\suitable.jpg");
        $this->Cache->PUT($key,$image);
        $image_from_the_cache = $this->Cache->get($key);
        $this->assertEquals($image,$image_from_the_cache);
    }

    /** @test */
    public function get_element_not_in_the_cache_from_the_cache(){
        $some_key_does_not_exists_in_the_cache = "KAH";
        $result = $this->Cache->get("KAH");
        $this->assertFalse($result);
    }
    /** @test */
    public function check_LRU_POLICY_IN_THE_CACHE(){
        //insert some data into the cache
        $this->Cache->PUT("123","KKKK");
        $this->Cache->PUT("456","MMMM");
        $this->Cache->PUT("789","JJJJ");
        $this->Cache->get("123");
        $this->Cache->LRU();
        $result1 = $this->Cache->get("123");
        $result2 = $this->Cache->get("456");
        $result3 = $this->Cache->get("789");
        $this->assertEquals("KKKK",$result1);
        $this->assertFalse($result2);
        $this->assertEquals("JJJJ",$result3);
    }
    /** @test */
    public function check_size_in_cache_is_calculated_probably(){
        $key = "123";
        $value = file_get_contents("C:\Users\Jaafar\Desktop\Tmp\suitable.jpg");
        $previousSize = $this->Cache->getSize();
        $this->Cache->PUT($key,$value);
        $expectedSize = strlen($key) + strlen($value);
        $expectedSize /= 1000000;
        $acutalSize = $this->Cache->getSize();
        $acutalSize -= $previousSize;
        $this->assertEquals($expectedSize,$acutalSize);
    }
    /** @test */
    public function Check_invalidate_key_operation_in_the_Cache(){
        $key = "123";
        $value = file_get_contents("C:\Users\Jaafar\Desktop\Tmp\suitable.jpg");
        $this->Cache->PUT($key,$value);
        $result = $this->Cache->get("123");
        $this->assertNotFalse($result);
        $this->Cache->InvalidateKey("123");
        $result = $this->Cache->get("123");
        $this->assertFalse($result);
    }

    /** @test */
    public function check_clear_Cache(){
        $this->Cache->clear();
        $actualsize = $this->Cache->getSize();
        $expectedSize = 0;
        $this->assertEquals($actualsize,$expectedSize);
    }
    /** @test */
    public function check_time_requirement_For_Cache_access(){
        $milliseconds1 = microtime(true);
        $this->Cache->get("123");
        $milliseconds2 = microtime(true);
        $timestamp =  $milliseconds2 - $milliseconds1;
        $this->assertLessThan("9.1457672119141E-6",$timestamp);
    }


}
